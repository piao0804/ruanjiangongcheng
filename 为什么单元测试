单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。

 比如对函数abs()，我们可以编写出以下几个测试用例：

输入正数，比如1、1.2、0.99，期待返回值与输入相同；

输入负数，比如-1、-1.2、-0.99，期待返回值与输入相反；

输入0，期待返回0；

输入非数值类型，比如None、[]、{}，期待抛出TypeError。

把上面的测试用例放到一个测试模块里，就是一个完整的单元测试。

如果单元测试通过，说明我们测试的这个函数能够正常工作。如果单元测试不通过，要么函数有bug，要么测试条件输入不正确，总之，需要修复使单元测试能够通过。

单元测试通过后有什么意义呢？如果我们对abs()函数代码做了修改，只需要再跑一遍单元测试，如果通过，说明我们的修改不会对abs()函数原有的行为造成影响，如果测试不通过，说明我们的修改与原有行为不一致，要么修改代码，要么修改测试
。
单元测试有很多显而易见的好处：

验证代码的正确性
验证边界条件
避免BUG复现
避免修改代码时出错
避免其他团队成员修改代码时出错
便于自动化测试与部署
另外，单元测试能够提供另一个思考代码的角度，这对于编写高质量的代码是很有好处的。
